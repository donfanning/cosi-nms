head     1.1;
branch   1.1.1;
access   ;
symbols  arelease:1.1.1.1 avendor:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2001.08.22.14.29.31;  author robelewi;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.22.14.29.31;  author robelewi;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/local/bin/perl 
#
#	build-ip-routes	number-of-routes 1st-3octets-gateway-network	
#
#---------------------------------------------------------------#
# ver    comments               author   date
# 00   original                 dblack@@cisco.com        5/11/98
# 01   added code to eliminate duplicate routes. no need, because
#      a router will ignore them anyhow.
#                               dblack@@cisco.com        5/28/98
#
# This script released to open source under the Mozilla Public License
#---------------------------------------------------------------#
die "Usage: build-ip-routes numoroutes 3octect-gateway\n" if($#ARGV==0);

$SPACES="  ";
#$GATEWAY1="171.68.54.";
$DOT=".";
$yes="yes";
$NUMOROUTES=$ARGV[0];
$GATEWAY1=$ARGV[1];
#
# there are easier ways to do this. this put in print statements
# and dump out any variable at any time
#
#
$NETMASK1="255".$DOT."255".$DOT."255".$DOT."224";
$OCTETFOUR1="224";
$NETMASK2="255".$DOT."255".$DOT."255".$DOT."192";
$OCTETFOUR2="192";
$NETMASK3="255".$DOT."255".$DOT."255".$DOT."128";
$OCTETFOUR3="128";
$NETMASK4="255".$DOT."255".$DOT."255".$DOT."0";
$OCTETFOUR4="0";
$NETMASK5="255".$DOT."255".$DOT."252".$DOT."0";
$OCTETTHREE1="252";
#$OCTETFOUR4="0";
$STRING1="ip route  ";
#-------------------------
# the random number generators
# run it a few times to prime the pump 
#-------------------------
srand(time);
$IP1 = int(rand 220);
$IP2 = int(rand 255);
$IP3 = int(rand 255);
$IP4 = int(rand 255);
#-------------------------
# main Loop 
#-------------------------
#
for ($ROUTECOUNTER =0 ; $ROUTECOUNTER < $NUMOROUTES; )
{
#	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$IP3.$DOT.$IP4;
# dont want any 0 networks
#
$IP1 = int(rand 220);
while ($IP1 == 0 )
{ $IP1= int (rand 220 );}

$IP2 = int(rand 254);
while ($IP2 == 0 )
{ $IP2= int (rand 254 );}
$IP3 = int(rand 254);
$IP4 = int(rand 254);
#
# this is ugly, but its a kooky way of varying the net mask
# 
$MASKFLAG=substr($IP4,0,1);
if ( $MASKFLAG < 2) 
	{	$NETMASK = $NETMASK1;
	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$IP3.$DOT.$OCTETFOUR1;
	}

 elsif ($MASKFLAG < 4)
	{	$NETMASK = $NETMASK2;
	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$IP3.$DOT.$OCTETFOUR2;
	}

 elsif ($MASKFLAG < 6)
	{	$NETMASK = $NETMASK3; 
	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$IP3.$DOT.$OCTETFOUR3;
	}

 elsif ($MASKFLAG < 8)
	{	$NETMASK = $NETMASK4; 
	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$IP3.$DOT.$OCTETFOUR4;
	}
 else
	{	$NETMASK = $NETMASK5; 
	$HOSTADDR = $IP1.$DOT.$IP2.$DOT.$OCTETTHREE1.$DOT.$OCTETFOUR4;
	}

# 
# Assemble the output strings
#
# there are easier ways to do this. this put in print statements
# and dump out any variable at any time
#
# Unfortunately you have to hard code the gateway network.
# make it point to something local. Otherwise the cli will eject it
#
$GATEWAY=$GATEWAY1.$IP4;
$OUTPUT=$STRING1.$HOSTADDR.$SPACES.$NETMASK.$SPACES.$GATEWAY; 
$SHORTPUT=$STRING1.$HOSTADDR.$SPACES.$NETMASK;


#print "looking for $NETWORK1\n";
if ( $BIGARRAY{$HOSTADDR} ne $yes)
{       $ROUTECOUNTER++;
        print "$OUTPUT\n";
 }
$BIGARRAY{$HOSTADDR} = $yes;

$IP4=$IP4+4;
       	          }
#
# Were done! It's Miller Time !!!!
# print "finished\n";


@


1.1.1.1
log
@ios command script toolkit initial checkin 
@
text
@@
