head     1.1;
branch   1.1.1;
access   ;
symbols  arelease:1.1.1.1 avendor:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2001.08.22.14.29.31;  author robelewi;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.22.14.29.31;  author robelewi;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@#!/usr/local/bin/perl 
#Another simple but powerful script using Linux & Perl.
# This script creates a large volume of static ipx sap entries
# once you have built the file, upload it to a router 
# with tftp. Sit back and watch the fun.
#
# here is what a static ipx entry looks like
#
#	ipx sap 40 dlb002 4444.0001.0002.0004 5000 5
#
# useage: build-sap-table  localipxnetwork number-of-routes > filename
#---------------------------------------------------------------#
#
# ver    comments 		author	 date
# 00   original			dblack@@cisco.com	5/11/98
# 01   added code to eliminate duplicate routes. no need, because
#      a router will ignore them anyhow.
#                               dblack@@cisco.com        5/28/98
#
#
# This script released to open source under the Mozilla Public License
#---------------------------------------------------------------#
#
die "Usage: build-sap-table localipxnetwork number-of-routes\n" if($#ARGV==0);
#
# Set the variables to create the string first
#
$NETWORK1=$ARGV[0];
$NUMOSAPS=$ARGV[1];
$SPACES="  ";
$DOT=".";
$yes="yes";
$HOPS=6;
#
#-------------------------
# the random number generators
# run it a few times to prime the pump
#-------------------------
srand(time);
$IP1 = int(rand 220);
$IP2 = int(rand 255);
$IP3 = int(rand 255);
$IP4 = int(rand 255);
#
#---------------------------------------------------------------#
#
# main loop  
#---------------------------------------------------------------#
#  
$STRING1="ipx sap ";
$STRING2="testsap";

for ($COUNTER1 = 0; $COUNTER1 < $NUMOSAPS;)
{
# this is on purpose. dont want multicast addresses
$TEMP1 = int(rand 99);
$TEMP2 = int(rand 3200);
$TEMP3 = int(rand 3200);
$PORT = int(rand 99);

$HEXADDR1 = sprintf "%lx", $TEMP1;
$HEXADDR2 = sprintf "%lx", $TEMP2;
$HEXADDR3 = sprintf "%lx", $TEMP3;

$HEADING=$STRING1.$SPACES.$PORT.$SPACES.$STRING2.$COUNTER1.$SPACES;

$OUTPUT = $HEADING.$NETWORK1.$DOT.$HEXADDR1.$DOT.$HEXADDR2.$DOT.$HEXADDR3.$SPACES.$PORT.$SPACES.$HOPS;

$INDXNUM=$HEXADDR1.$HEXADDR2.$HEXADDR3;

#print "looking for $INDXNUM\n";
if ( $BIGARRAY{$INDXNUM} ne $yes)
{       $COUNTER1++;
        print "$OUTPUT\n";
 }
$BIGARRAY{$INDXNUM} = $yes;




#print "$OUTPUT\n";
}
#
# CLose up shop, lets go home...
# Miller Time!!
# \8-)
#
# print "finished\n";


@


1.1.1.1
log
@ios command script toolkit initial checkin 
@
text
@@
