head	1.12;
access;
symbols
	devel:1.1.1.1 COSI:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2003.09.01.19.45.54;	author jmarcus;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.01.19.37.01;	author jmarcus;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.01.11.59.14;	author knail1;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.01.11.04.58;	author knail1;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.31.22.19.34;	author jmarcus;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.03.06.25.01;	author jmarcus;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.04.20.21.46;	author jmarcus;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.26.16.57.41;	author jmarcus;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.19.05.26.32;	author jmarcus;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.18.08.02.04;	author jmarcus;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.08.05.34.29;	author jmarcus;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.07.01.59.17;	author jmarcus;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.07.01.59.17;	author jmarcus;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add a constant for ADMIN_TAG and avoid using a hard-coded string in
Collector.pm.
@
text
@#
# $Id: Globals.pm,v 1.11 2003/09/01 19:37:01 jmarcus Exp $
#
package SAA::Globals;

use strict;
require 5.002;

use vars qw(@@ISA @@EXPORT);
use Exporter;
use Carp;

@@ISA    = qw(Exporter);
@@EXPORT = qw(
    HOST_DOWN
    HOST_UP_IP
    HOST_UP_SNMP
    SNMP_ERR_NOSUCHNAME
    SNMP_ERR_V2_IN_V1
    SNMP_ERR_BAD_VERSION
    ADMIN_TAG
    addrToOctStr
    addrToHexStr
    checkIPAddr
);

use constant HOST_DOWN    => 0;
use constant HOST_UP_IP   => 1;
use constant HOST_UP_SNMP => 2;

# Define some common ucd-snmp return codes.
use constant SNMP_ERR_NOSUCHNAME  => 2;
use constant SNMP_ERR_V2_IN_V1    => -7;
use constant SNMP_ERR_BAD_VERSION => -14;

# Define our admin tag.
use constant ADMIN_TAG => "saaconfig";

# Public static methods
sub addrToOctStr {

        if (scalar(@@_) != 1) {
                croak
                    "SAA::Globals::addrToOctStr: method requires one argument";
        }

        # Public static method to convert an IP address string into a 4-byte
        # octet string.
        # XXX This should be smarter so that SNA address can also be supported.
        my $addr = shift;
        my ($a, $b, $c, $cidr) = split(/\./, $addr, 4);
        return ("$a $b $c $cidr");

        #return ( sprintf "%.2x %.2x %.2x %.2x", $a, $b, $c, $cidr );
}

sub addrToHexStr {
        if (scalar(@@_) != 1) {
                croak
                    "SAA::Globals::addrToHexStr: method requires one argument";
        }

        my $addr = shift;
        my ($a, $b, $c, $cidr) = split(/\./, $addr, 4);
        return (sprintf "%2.2x%2.2x%2.2x%2.2x", $a, $b, $c, $cidr);
}

sub checkIPAddr {

        if (scalar(@@_) != 1) {
                croak "SAA::Globals::checkIPAddr: method requires one argument";
        }

        my $addr   = shift;
        my @@octets = split(/\./, $addr);

        if (scalar(@@octets) != 4) {
                return;
        }

        foreach (@@octets) {
                /^\d+$/ or return;
        }

        1;
}

1;
__END__
@


1.11
log
@Rewrite addrToHexStr() to be more like addrToOctetStr.
@
text
@d2 1
a2 1
# $Id: Globals.pm,v 1.10 2003/09/01 11:59:14 knail1 Exp $
d21 1
d35 3
@


1.10
log
@added Hex fn
@
text
@d2 1
a2 1
# $Id: Globals.pm,v 1.9 2003/09/01 11:04:58 knail1 Exp $
d15 9
a23 9
  HOST_DOWN
  HOST_UP_IP
  HOST_UP_SNMP
  SNMP_ERR_NOSUCHNAME
  SNMP_ERR_V2_IN_V1
  SNMP_ERR_BAD_VERSION
  addrToOctStr
  addrToHexStr
  checkIPAddr
d47 1
a47 1
        my ($a, $b, $c, $cidr) = split (/\./, $addr, 4);
d54 4
a57 12
    if ( scalar(@@_) != 1 ) {
        croak "SAA::Globals::addrToHexStr: method requires one argument";
    }

	my $addr = shift ;
	my (@@IP,  $IP_octet, @@hex_IP, $hex_octet, $hex_IP);
    @@IP = split ( /\./, $addr);
	foreach $IP_octet (@@IP)	{
		$hex_octet = sprintf("%2.2x",$IP_octet);
		push @@hex_IP, $hex_octet;
	}
	$hex_IP=join("", @@hex_IP);
d59 3
a61 1
    return ( $hex_IP ) ;
d71 1
a71 1
        my @@octets = split (/\./, $addr);
@


1.9
log
@added Hex
@
text
@d2 1
a2 1
# $Id: Globals.pm,v 1.8 2003/08/31 22:19:34 jmarcus Exp $
a14 1
<<<<<<< Globals.pm
a23 10
=======
    HOST_DOWN
    HOST_UP_IP
    HOST_UP_SNMP
    SNMP_ERR_NOSUCHNAME
    SNMP_ERR_V2_IN_V1
    SNMP_ERR_BAD_VERSION
    addrToOctStr
    checkIPAddr
>>>>>>> 1.8
@


1.8
log
@Clean up all the source with a nice call to:

perltidy -i=8 -t -pt=2 -bt=2 -sbt=2 -ci=4 -noll -sfs -nasc -ce
@
text
@d2 1
a2 1
# $Id: Globals.pm,v 1.7 2001/12/03 06:25:01 jmarcus Exp $
d15 11
d34 1
d62 17
@


1.7
log
@Fix bug in exporter.
@
text
@d2 1
a2 1
# $Id: Globals.pm,v 1.6 2001/10/04 20:21:46 jmarcus Exp $
d15 8
a22 8
  HOST_DOWN
  HOST_UP_IP
  HOST_UP_SNMP
  SNMP_ERR_NOSUCHNAME
  SNMP_ERR_V2_IN_V1
  SNMP_ERR_BAD_VERSION
  addrToOctStr
  checkIPAddr
d37 13
a49 11
    if ( scalar(@@_) != 1 ) {
        croak "SAA::Globals::addrToOctStr: method requires one argument";
    }

    # Public static method to convert an IP address string into a 4-byte
    # octet string.  
    # XXX This should be smarter so that SNA address can also be supported.
    my $addr = shift;
    my ( $a, $b, $c, $cidr ) = split ( /\./, $addr, 4 );
	return ( "$a $b $c $cidr" );
    #return ( sprintf "%.2x %.2x %.2x %.2x", $a, $b, $c, $cidr );
d54 14
a67 14
    if ( scalar(@@_) != 1 ) {
        croak "SAA::Globals::checkIPAddr: method requires one argument";
    }

    my $addr   = shift;
    my @@octets = split ( /\./, $addr );

    if ( scalar(@@octets) != 4 ) {
        return;
    }

    foreach (@@octets) {
        /^\d+$/ or return;
    }
d69 1
a69 1
    1;
@


1.6
log
@Add $Id$ CVS tags.
@
text
@d2 1
a2 1
# $Id$
d9 1
d13 2
a14 4
my @@ISA    = qw(Exporter);
my @@EXPORT = qw(
  KEY
  PAD
a23 6

# Random key used in Blowfish ciphering.
# XXX This key should not be statically defined here.  In the release, this
# should be configurable by the end user so that all keys will be different.
use constant KEY => pack( "H16", 'aIC9e8!Cmtdyu4GV' );
use constant PAD => 'aBcDeFg';
@


1.5
log
@Coding, coding coding....
@
text
@d1 3
@


1.4
log
@More code changes and additions.  Moved some of the more prominent
private static methods into Globals, and made them public static.
@
text
@d49 3
a51 2
    my ( $a, $b, $c, $cidr ) = split ( /\./, $addr );
    return ( sprintf "%.2x %.2x %.2x %.2x", $a, $b, $c, $cidr );
@


1.3
log
@Massive OOP style changes.
@
text
@d19 2
d37 35
@


1.2
log
@Added a TODO comment about key management.
@
text
@a5 4
# Module export
use vars qw(@@EXPORT_OK);
use vars qw($KEY $PAD $HOST_DOWN $HOST_UP_IP $HOST_UP_SNMP);

d9 11
a19 2
*import = \&Exporter::import;
@@EXPORT_OK = qw($KEY $PAD $HOST_DOWN $HOST_UP_IP $HOST_UP_SNMP);
d24 6
a29 2
$KEY = pack("H16", 'aIC9e8!Cmtdyu4GV');
$PAD = 'aBcDeFg';
d31 4
a34 3
$HOST_DOWN    = 0;
$HOST_UP_IP   = 1;
$HOST_UP_SNMP = 2;
@


1.1
log
@Initial revision
@
text
@d17 2
@


1.1.1.1
log
@Initial import into the COSI CVS respository
@
text
@@
