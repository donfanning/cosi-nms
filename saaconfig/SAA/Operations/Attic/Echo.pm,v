head	1.4;
access;
symbols
	devel:1.1.1.1 COSI:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.09.09.21.39.48;	author jmarcus;	state dead;
branches;
next	1.3;

1.3
date	2001.08.10.18.55.04;	author jmarcus;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.16.17.53;	author jmarcus;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.07.01.59.17;	author jmarcus;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.07.01.59.17;	author jmarcus;	state Exp;
branches;
next	;


desc
@@


1.4
log
@These are replaced with the SAA::Operation class.
@
text
@package SAA::Operations::Echo;

use strict;
require 5.002;
use lib qw(../..);
use SNMP;
use SAA::Operations;

sub new {

    # This constructor create a new ipEcho operation class.  It accepts no
    # arguments as it is designed to do the defaults.  To use the class, 
    # instatiate a new instance of it, then use the accessor methods to update
    # the class properties.
    my ( $that, @@args ) = @@_;
    my $class = ref($that) || $that;

    my $self = {
        Name      => 'Default IP Echo Operation',
        Type      => $SAA::Operations::TYPE_ECHO,
        Protocol  => $SAA::Operations::PROTO_ICMP_ECHO,
        Threshold => 5000,
        Frequency => 60,
        Timeout   => 5000,
        ToS       => 0,
    };

    bless( $self, $class );
    $self;
}

use Alias qw(attr);
use vars qw(
  $Name
  $Type
  $Protocol
  $Threshold
  $Frequency
  $Timeout
  $ToS
);

sub name {
    my $self = attr shift;
    if (@@_) { $Name = shift; }
    return $Name;
}

sub type {

    # Type is a constant.
    my $self = attr shift;
    return $Type;
}

sub protocol {

# Protocol can either be ipIcmpEcho, ipUdpEchoAppl, snaRUEcho, snaLU0EchoAppl,
    # snaLU2EchoAppl, snaLU62Echo, or snaLU62EchoAppl.
    my $self = attr shift;
    if (@@_) { $Protocol = shift; }
    return $Protocol;
}

sub threshold {
    my $self = attr shift;
    if (@@_) {
        my $threshold = shift;
        if ( $threshold < 0 || $threshold > $self->timeout()
          || $threshold > $SAA::Operations::MAX_THRESHOLD )
        {
            return $Threshold;
        }
        $Threshold = $threshold;
    }
    return $Threshold;
}

sub timeout {
    my $self = attr shift;
    if (@@_) {
        my $timeout = shift;
        if ( $timeout < 0 || $timeout < $self->threshold()
          || $timeout > $SAA::Operations::MAX_TIMEOUT )
        {
            return $Timeout;
        }
        $Timeout = $timeout;
    }
    return $Timeout;
}

sub frequency {
    my $self = attr shift;
    if (@@_) {
        my $frequency = shift;

        # Per the MIB, this value cannot be less than $Timeout.
        if ( $frequency < 0 || $frequency < $self->timeout()
          || $frequency > $SAA::Operations::MAX_FREQUENCY )
        {
            return $Frequency;
        }
        $Frequency = $frequency;
    }
    return $Frequency;
}

sub tos {
    my $self = attr shift;
    if (@@_) {
        my $tos = shift;
        if ( $tos < 0 || $tos > 255 ) {
            return $ToS;
        }
        $ToS = $tos;
    }
    return $ToS;
}
@


1.3
log
@Implemented the Echo operation.  This doesn't do any SNMP, but rather sets
up the necessary properties for the operation.
@
text
@@


1.2
log
@Fixed the lib path to make it less marcus-dependent.
@
text
@d7 1
a7 1
use SAA::Operations::Globals;
d10 109
a118 12
	my ($class, @@args) = @@_;
	
	my %fields = (
		Type => $SAA::Operations::Globals::TYPE_ECHO,
		Protocol => $SAA::Operations::Globals::PROTO_ICMP_ECHO,
		Threshold => 5000,
		Frequency => 60,
		Timeout => 5000,
		Target => '',
		Source => '',
		ToS => 0,
	);
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
use lib "/home/marcus/src/saa";
@


1.1.1.1
log
@Initial import into the COSI CVS respository
@
text
@@
