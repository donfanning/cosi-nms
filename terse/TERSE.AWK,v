head     1.1;
branch   1.1.1;
access   ;
symbols  arelease:1.1.1.1 avendor:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2001.08.27.19.11.10;  author robelewi;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.08.27.19.11.10;  author robelewi;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@# COSI: Vadim Zakharine, Access Team
# ver. 1.1

BEGIN {
# idx_use_id defines whether users with different IDs should be counted
# separately. Users with missing IDs also form a separate group.
 idx_use_id = "N"
# idx_use_sn defines whether users with different calling numberss should
# be counted separately. Users with missing calling numbers also form a
# separate group.
 idx_use_sn = "Y"
# idx_use_sn defines whether users with different called numberss should
# be counted separately. Users with missing called numbers also form a
# separate group.
 idx_use_dn = "Y"
# Time period (in seconds) for which DR statistics is collected together
 period = 15

 FS="[ ,]+"
 SUBSEP = ""
 total = 0
}

/%CALLRECORD/ {
 Userid = ""
 Calling = ""
 Called = ""
 Discon = ""
 total++
 for(i=1; (Discon == "") && (i <= NF); i++) {
  if((idx_use_id == "Y") && (Userid == "") && ($i ~ /^userid=/)) {
   split($i, buff, "=+")
   Userid = sprintf("\"%s\"", buff[2])
  }
  else if((idx_use_sn == "Y") && (Calling == "") && ($i ~ /^calling=/)) {
   split($i, buff, "=+")
   Calling = buff[2]
  }
  else if((idx_use_dn == "Y") && (Called == "") && ($i ~ /^called=/)) {
   split($i, buff, "=+")
   Called = sprintf(">%s", buff[2])
  }
  else if((Discon == "") && ($i ~ /^disc\(modem\)=/)) {
   split($i, buff, "=+")
   Discon = buff[2]
  }
 }
 printf("[00]%s=%s%s%s", Discon, Calling, Called, Userid)
 usertotl[Calling, Called, Userid]++
 userdisc[Calling, Called, Userid, Discon]++
 d_r_stat[Discon]++
 for(i=1; ($i !~ /^disc/) && (i <= NF); i++) {
  if($i ~ /^%CALLRECORD/) {
   printf(" %s", $i)
  }
  else if($i ~ /^std=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^prot=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^b\-rate=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^comp=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^init\-rx\/tx=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^finl\-rx\/tx=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^retr=/) {
   printf(" %s", $i)
  }
  else if($i ~ /sq=/) {
   printf(" %s", $i)
  }
  else if($i ~ /snr=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^rx\-tx=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^chars=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^bad=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^ec=/) {
   printf(" %s", $i)
  }
  else if($i ~ /^time=/) {
   printf(" %s", $i)
   split($i, buff, "=+")
   time = period * (1 + (int(buff[2] / period)))
   timestat[time]++
   time_d_r[time, Discon]++
   if(usermxtm[Calling, Called, Userid] < time) {
    usermxtm[Calling, Called, Userid] = time
   }
   useravtm[Calling, Called, Userid] += time
  }
  else if($i ~ /^finl\-state=/) {
   printf(" %s", $i)
  }
 }
 while(i <= NF) {
  printf(" %s", $i)
  i++
 }
 printf("\n")
}

END {
 Userid = 0
 for(Calling in usertotl) {
  Userid++
  for(Called in d_r_stat) {
   if(userdisc[Calling, Called] != "") {
    printf("[10]%s=% 4s: %u (user %.2f\%, DR total %.2f\%)\n",
     Calling, Called, userdisc[Calling, Called],
     userdisc[Calling, Called]*100/usertotl[Calling],
     userdisc[Calling, Called]*100/d_r_stat[Called])
   }
  }
  printf("[10]%s=Total=%u, average time=%.2fs, max time=%us\n",
   Calling, usertotl[Calling], useravtm[Calling] / usertotl[Calling],
   usermxtm[Calling])
 }
 for(Called in timestat) {
  for(Calling in d_r_stat) {
   if(time_d_r[Called, Calling] != "") {
    printf("[20]%5us=% 4s: %u (%us period %.2f\%, DR total %.2f\%)\n",
     Called, Calling, time_d_r[Called, Calling], period,
     time_d_r[Called, Calling]*100/timestat[Called],
     time_d_r[Called, Calling]*100/d_r_stat[Calling])
   }
  }
  printf("[20]% 5us=Total= %u (%us period =100%=, total %.2f\%)\n",
    Called, timestat[Called], period, timestat[Called] * 100 / total)
 }
 for(Calling in d_r_stat) {
  printf("[30]% 4s: %u (%.2f\%)\n", Calling, d_r_stat[Calling],
   d_r_stat[Calling]*100/total)
 }
 printf("[40]Total: %u call records, %u users\n", total, Userid)
}@


1.1.1.1
log
@no message
@
text
@@
