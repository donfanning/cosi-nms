head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2001.09.06.05.11.48;	author jmarcus;	state dead;
branches;
next	1.7;

1.7
date	2001.06.17.07.20.25;	author jmarcus;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.15.17.55.25;	author jmarcus;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.15.17.06.28;	author jmarcus;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.15.05.16.25;	author jmarcus;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.14.18.34.18;	author jmarcus;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.14.16.35.17;	author jmarcus;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.15.41.57;	author jmarcus;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Generated documentation doesn't belong in CVS.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Sun Jun 17 03:20:13 EDT 2001 -->
<title>
  Class com.marcuscom.MISAL.MISAL
</title>
</head>
<body>
<a name="_top_"></a>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-com.marcuscom.MISAL.html">This Package</a>  <a href="Package-com.marcuscom.MISAL.html">Previous</a>  <a href="com.marcuscom.MISAL.MISALCiscoIOS.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
<hr>
<h1>
  Class com.marcuscom.MISAL.MISAL
</h1>
<pre>
java.lang.Object
   |
   +----com.marcuscom.MISAL.MISAL
</pre>
<hr>
<dl>
  <dt> public class <b>MISAL</b>
  <dt> extends Object
  <dt> implements Runnable
</dl>
<p>MISAL is the MarcusCom Intelligent Socket Abstraction Library.
 It is designed to make interacting with TCP sockets (such as telnet)
 much easier.  It uses a separate thread to check the socket's state,
 and make sure data is sent at the right time.</p>
<p>
<dl>
  <dt> <b>Version:</b>
  <dd> 1.0, $Id: com.marcuscom.MISAL.MISAL.html,v 1.7 2001/06/17 07:20:25 jmarcus Exp $
  <dt> <b>Author:</b>
  <dd> Joe Clarke &lt;marcus@@marcuscom.com&gt;
</dl>
<hr>
<a name="index"></a>
<h2>
  <img src="images/variable-index.gif" width=207 height=38 alt="Variable Index">
</h2>
<dl>
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#DEFAULT_BUFFER_SIZE"><b>DEFAULT_BUFFER_SIZE</b></a>
  <dd>  The default size for the main accumulator buffer 
 (1 MB).
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#DEFAULT_RETRIES"><b>DEFAULT_RETRIES</b></a>
  <dd>  The default number of retries before failing when a state match
 is not found (1000).
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL_DEFAULT_SLEEP_INTERVAL"><b>MISAL_DEFAULT_SLEEP_INTERVAL</b></a>
  <dd>  The default state checking thread interval 
 (1 millisecond).
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL_SHORT_THREAD_SLEEP_INTERVAL"><b>MISAL_SHORT_THREAD_SLEEP_INTERVAL</b></a>
  <dd>  Number of milliseconds to wait with fast timers 
 (10 milliseconds).
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL_STATE_CLOSED"><b>MISAL_STATE_CLOSED</b></a>
  <dd>  The state of the socket after it is closed.
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL_STATE_UNKNOWN"><b>MISAL_STATE_UNKNOWN</b></a>
  <dd>  The state of the socket when no other state matches.
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL_THREAD_SLEEP_INTERVAL"><b>MISAL_THREAD_SLEEP_INTERVAL</b></a>
  <dd>  The default time to wait between state checking attempts
 (100 milliseconds).
</dl>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#MISAL(java.net.Socket)"><b>MISAL</b></a>(Socket)
  <dd>  Creates a new MISAL socket.
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addState(int, java.lang.String)"><b>addState</b></a>(int, String)
  <dd>  Adds a new MISAL state to the state table.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#clearBuffer()"><b>clearBuffer</b></a>()
  <dd>  Clears the main accumulator buffer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#closeSocket()"><b>closeSocket</b></a>()
  <dd>  Closes the MISAL socket.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#debug(java.lang.String)"><b>debug</b></a>(String)
  <dd>  Prints a debugging message.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#expect(int)"><b>expect</b></a>(int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#expect(int, int)"><b>expect</b></a>(int, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#expect(java.lang.String)"><b>expect</b></a>(String)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#expect(java.lang.String, int)"><b>expect</b></a>(String, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getBuffer()"><b>getBuffer</b></a>()
  <dd>  Returns the contents of the main accumulator buffer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getBufferSize()"><b>getBufferSize</b></a>()
  <dd>  Returns the maximum allowed size of the main accumulator buffer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getDebug()"><b>getDebug</b></a>()
  <dd>  Tells whether or not debugging is enabled.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getInputStream()"><b>getInputStream</b></a>()
  <dd>  Returns the MISAL socket's output stream as a
 java.io.BufferedOutputStream.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getLastBuffer()"><b>getLastBuffer</b></a>()
  <dd>  Returns the output of the temporary buffer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getOutputStream()"><b>getOutputStream</b></a>()
  <dd>  Returns the MISAL socket's input stream as a
 java.io.BufferedInputStream.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getSleepInterval()"><b>getSleepInterval</b></a>()
  <dd>  Returns the MISAL state checking thread's sleep interval.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getState()"><b>getState</b></a>()
  <dd>  Returns the current MISAL state.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#removeState(int)"><b>removeState</b></a>(int)
  <dd> 
 Removes a MISAL state from the state machine.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#run()"><b>run</b></a>()
  <dd>  Runs the state checking thread.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(int, java.lang.String, int)"><b>send</b></a>(int, String, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(int, java.lang.String, int, int)"><b>send</b></a>(int, String, int, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(int, java.lang.String, java.lang.String)"><b>send</b></a>(int, String, String)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(int, java.lang.String, java.lang.String, int)"><b>send</b></a>(int, String, String, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(int, java.lang.String, java.lang.String, int, int)"><b>send</b></a>(int, String, String, int, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(java.lang.String, int)"><b>send</b></a>(String, int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#send(java.lang.String, java.lang.String)"><b>send</b></a>(String, String)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setBufferSize(int)"><b>setBufferSize</b></a>(int)
  <dd>  Sets the maximum allowed size of the main accumulator buffer.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setSleepInterval(int)"><b>setSleepInterval</b></a>(int)
  <dd>  Sets the MISAL state checking thread's sleep interval.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#setState(int)"><b>setState</b></a>(int)
  <dd>  Sets the current MISAL state.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#startCheckingState()"><b>startCheckingState</b></a>()
  <dd>  Starts the state checking thread.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#stopCheckingState()"><b>stopCheckingState</b></a>()
  <dd>  Stops the state checking thread.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#toggleDebug()"><b>toggleDebug</b></a>()
  <dd>  Toggle the debugging state.
</dl>
<a name="variables"></a>
<h2>
  <img src="images/variables.gif" width=153 height=38 alt="Variables">
</h2>
<a name="MISAL_STATE_UNKNOWN"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL_STATE_UNKNOWN</b>
<pre>
 public static final int MISAL_STATE_UNKNOWN
</pre>
<dl>
  <dd> The state of the socket when no other state matches.<p>
</dl>
<a name="MISAL_STATE_CLOSED"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL_STATE_CLOSED</b>
<pre>
 public static final int MISAL_STATE_CLOSED
</pre>
<dl>
  <dd> The state of the socket after it is closed.<p>
</dl>
<a name="MISAL_DEFAULT_SLEEP_INTERVAL"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL_DEFAULT_SLEEP_INTERVAL</b>
<pre>
 protected static final int MISAL_DEFAULT_SLEEP_INTERVAL
</pre>
<dl>
  <dd> The default state checking thread interval 
 (1 millisecond).<p>
</dl>
<a name="MISAL_THREAD_SLEEP_INTERVAL"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL_THREAD_SLEEP_INTERVAL</b>
<pre>
 protected static final int MISAL_THREAD_SLEEP_INTERVAL
</pre>
<dl>
  <dd> The default time to wait between state checking attempts
 (100 milliseconds).<p>
</dl>
<a name="MISAL_SHORT_THREAD_SLEEP_INTERVAL"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL_SHORT_THREAD_SLEEP_INTERVAL</b>
<pre>
 protected static final int MISAL_SHORT_THREAD_SLEEP_INTERVAL
</pre>
<dl>
  <dd> Number of milliseconds to wait with fast timers 
 (10 milliseconds).<p>
</dl>
<a name="DEFAULT_RETRIES"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>DEFAULT_RETRIES</b>
<pre>
 protected static final int DEFAULT_RETRIES
</pre>
<dl>
  <dd> The default number of retries before failing when a state match
 is not found (1000).  This number is multiplied by the 
 MISAL_THREAD_SLEEP_INTERVAL.<p>
</dl>
<a name="DEFAULT_BUFFER_SIZE"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>DEFAULT_BUFFER_SIZE</b>
<pre>
 protected static final int DEFAULT_BUFFER_SIZE
</pre>
<dl>
  <dd> The default size for the main accumulator buffer 
 (1 MB).  All data read from the socket is stored in this buffer.<p>
</dl>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="MISAL"></a>
<a name="MISAL(java.net.Socket)"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>MISAL</b>
<pre>
 public MISAL(Socket socket) throws SocketException, IOException
</pre>
<dl>
  <dd> Creates a new MISAL socket.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> socket - the <em>open</em> java.net.Socket to be
			abstracted
    <dt> <b>See Also:</b>
    <dd> Socket
  </dl></dd>
</dl>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="getInputStream()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getInputStream"><b>getInputStream</b></a>
<pre>
 protected BufferedInputStream getInputStream()
</pre>
<dl>
  <dd> Returns the MISAL socket's output stream as a
 java.io.BufferedOutputStream.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> getOutputStream, BufferedOutputStream
  </dl></dd>
</dl>
<a name="getOutputStream()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getOutputStream"><b>getOutputStream</b></a>
<pre>
 protected BufferedOutputStream getOutputStream()
</pre>
<dl>
  <dd> Returns the MISAL socket's input stream as a
 java.io.BufferedInputStream.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> getInputStream, BufferedInputStream
  </dl></dd>
</dl>
<a name="addState(int, java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addState"><b>addState</b></a>
<pre>
 public synchronized void addState(int state,
                                   String prompt) throws <a href="com.marcuscom.MISAL.MalformedMISALStateException.html#_top_">MalformedMISALStateException</a>
</pre>
<dl>
  <dd> Adds a new MISAL state to the state table.  MISAL states are used
 by the state reading/setting thread to indicate where the socket
 is.  For example, a state can be identified by the regular
 expression <code>/login: ?$/</code> and a constant 
 STATE_LOGIN_PROMPT.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> state - an integer (usually defined as a constant)
			that uniquely identifies this state.  Classes
			extending MISAL can start their state numbering
			at 1.
    <dd> prompt - a Perl regular expression, in the form of a
			String.  When this expression is matched, the
			MISAL state will be set to the value of the
			<code>state</code> argument
    <dt> <b>Throws:</b> <a href="com.marcuscom.MISAL.MalformedMISALStateException.html#_top_">MalformedMISALStateException</a>
    <dd> if the prompt is not a valid Perl regular expression.
    <dt> <b>See Also:</b>
    <dd> <a href="#removeState">removeState</a>, Pattern
  </dl></dd>
</dl>
<a name="removeState(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="removeState"><b>removeState</b></a>
<pre>
 public synchronized void removeState(int state)
</pre>
<dl>
  <dd> Removes a MISAL state from the state machine.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> state - integer representing the state to remove
    <dt> <b>See Also:</b>
    <dd> <a href="#addState">addState</a>
  </dl></dd>
</dl>
<a name="startCheckingState()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="startCheckingState"><b>startCheckingState</b></a>
<pre>
 protected void startCheckingState()
</pre>
<dl>
  <dd> Starts the state checking thread.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#stopCheckingState">stopCheckingState</a>
  </dl></dd>
</dl>
<a name="stopCheckingState()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="stopCheckingState"><b>stopCheckingState</b></a>
<pre>
 protected void stopCheckingState()
</pre>
<dl>
  <dd> Stops the state checking thread.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#startCheckingState">startCheckingState</a>
  </dl></dd>
</dl>
<a name="run()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="run"><b>run</b></a>
<pre>
 public void run()
</pre>
<dl>
  <dd> Runs the state checking thread.  This method should not
 be called directly.  Instead, use the 
 <code>stopCheckingState()</code> and 
 <code>startCheckingState()</code> methods.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#startCheckingState">startCheckingState</a>, <a href="#stopCheckingState">stopCheckingState</a>
  </dl></dd>
</dl>
<a name="setSleepInterval(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setSleepInterval"><b>setSleepInterval</b></a>
<pre>
 protected void setSleepInterval(int interval)
</pre>
<dl>
  <dd> Sets the MISAL state checking thread's sleep interval.  The thread
 will wait <code>interval</code> milliseconds before checking
 the state of the socket.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> interval - integer sleep interval
    <dt> <b>See Also:</b>
    <dd> <a href="#getSleepInterval">getSleepInterval</a>
  </dl></dd>
</dl>
<a name="getSleepInterval()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getSleepInterval"><b>getSleepInterval</b></a>
<pre>
 protected int getSleepInterval()
</pre>
<dl>
  <dd> Returns the MISAL state checking thread's sleep interval.  This 
 method returns the sleep interval as an integer representing the 
 number of milliseconds the state checking thread will wait before 
 checking the socket state again.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#setSleepInterval">setSleepInterval</a>
  </dl></dd>
</dl>
<a name="setState(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setState"><b>setState</b></a>
<pre>
 protected synchronized void setState(int state)
</pre>
<dl>
  <dd> Sets the current MISAL state.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> state - the state ID of a state already in the state
			machine
    <dt> <b>See Also:</b>
    <dd> <a href="#getState">getState</a>, <a href="#addState">addState</a>, <a href="#removeState">removeState</a>
  </dl></dd>
</dl>
<a name="getState()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getState"><b>getState</b></a>
<pre>
 public synchronized int getState()
</pre>
<dl>
  <dd> Returns the current MISAL state.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#getState">getState</a>, <a href="#addState">addState</a>, <a href="#removeState">removeState</a>
  </dl></dd>
</dl>
<a name="getBufferSize()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getBufferSize"><b>getBufferSize</b></a>
<pre>
 public synchronized int getBufferSize()
</pre>
<dl>
  <dd> Returns the maximum allowed size of the main accumulator buffer.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#setBufferSize">setBufferSize</a>, <a href="#getBuffer">getBuffer</a>, <a href="#clearBuffer">clearBuffer</a>
  </dl></dd>
</dl>
<a name="setBufferSize(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="setBufferSize"><b>setBufferSize</b></a>
<pre>
 public synchronized void setBufferSize(int size)
</pre>
<dl>
  <dd> Sets the maximum allowed size of the main accumulator buffer.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> size - size of the buffer in bytes
    <dt> <b>See Also:</b>
    <dd> <a href="#getBufferSize">getBufferSize</a>, <a href="#getBuffer">getBuffer</a>, <a href="#clearBuffer">clearBuffer</a>
  </dl></dd>
</dl>
<a name="clearBuffer()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="clearBuffer"><b>clearBuffer</b></a>
<pre>
 public synchronized void clearBuffer()
</pre>
<dl>
  <dd> Clears the main accumulator buffer.  Usually, this method is called
 right before running a command for which you wish to save output.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#getBufferSize">getBufferSize</a>, <a href="#getBuffer">getBuffer</a>
  </dl></dd>
</dl>
<a name="getLastBuffer()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getLastBuffer"><b>getLastBuffer</b></a>
<pre>
 public synchronized String getLastBuffer()
</pre>
<dl>
  <dd> Returns the output of the temporary buffer.  This buffer usually
 stores the output from the last run command.  It is useful for
 doing error checking.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#getBuffer">getBuffer</a>
  </dl></dd>
</dl>
<a name="getBuffer()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getBuffer"><b>getBuffer</b></a>
<pre>
 public synchronized String getBuffer()
</pre>
<dl>
  <dd> Returns the contents of the main accumulator buffer.  This buffer
 contains all the data fro the sockets output stream since the last
 call to <code>clearBuffer</code>.  The output will include the
 contents of the current temporary buffer as well.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#clearBuffer">clearBuffer</a>, <a href="#getLastBuffer">getLastBuffer</a>
  </dl></dd>
</dl>
<a name="getDebug()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getDebug"><b>getDebug</b></a>
<pre>
 public boolean getDebug()
</pre>
<dl>
  <dd> Tells whether or not debugging is enabled.
<p>
  <dd><dl>
    <dt> <b>See Also:</b>
    <dd> <a href="#toggleDebug">toggleDebug</a>, <a href="#debug">debug</a>
  </dl></dd>
</dl>
<a name="toggleDebug()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="toggleDebug"><b>toggleDebug</b></a>
<pre>
 public boolean toggleDebug()
</pre>
<dl>
  <dd> Toggle the debugging state.
<p>
  <dd><dl>
    <dt> <b>Returns:</b>
    <dd> The debugging state after being toggled
    <dt> <b>See Also:</b>
    <dd> <a href="#getDebug">getDebug</a>, <a href="#debug">debug</a>
  </dl></dd>
</dl>
<a name="send(java.lang.String, java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(String data,
                  String expect) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(java.lang.String, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(String data,
                  int expectState) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(int, java.lang.String, java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(int state,
                  String data,
                  String expect) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(int, java.lang.String, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(int state,
                  String data,
                  int expectState) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(int, java.lang.String, java.lang.String, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(int state,
                  String data,
                  String expect,
                  int wait) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(int, java.lang.String, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 public void send(int state,
                  String data,
                  int expectState,
                  int wait) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="send(int, java.lang.String, java.lang.String, int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="send"><b>send</b></a>
<pre>
 protected void send(int state,
                     String data,
                     String expect,
                     int expectState,
                     int wait) throws <a href="com.marcuscom.MISAL.IllegalMISALStateException.html#_top_">IllegalMISALStateException</a>, IOException
</pre>
<a name="expect(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="expect"><b>expect</b></a>
<pre>
 protected boolean expect(int state)
</pre>
<a name="expect(java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="expect"><b>expect</b></a>
<pre>
 protected boolean expect(String prompt)
</pre>
<a name="expect(int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="expect"><b>expect</b></a>
<pre>
 protected boolean expect(int state,
                          int tries)
</pre>
<a name="expect(java.lang.String, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="expect"><b>expect</b></a>
<pre>
 protected boolean expect(String prompt,
                          int tries)
</pre>
<a name="debug(java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="debug"><b>debug</b></a>
<pre>
 public void debug(String msg)
</pre>
<dl>
  <dd> Prints a debugging message.  The message will only be printed
 if debugging is enabled.
<p>
  <dd><dl>
    <dt> <b>Parameters:</b>
    <dd> msg - The message to be printed
    <dt> <b>See Also:</b>
    <dd> <a href="#getDebug">getDebug</a>, <a href="#toggleDebug">toggleDebug</a>
  </dl></dd>
</dl>
<a name="closeSocket()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="closeSocket"><b>closeSocket</b></a>
<pre>
 public void closeSocket()
</pre>
<dl>
  <dd> Closes the MISAL socket.  Once you are done with the socket, you
 can have MISAL close it.  This will stop the state checking thread.
<p>
</dl>
<hr>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-com.marcuscom.MISAL.html">This Package</a>  <a href="Package-com.marcuscom.MISAL.html">Previous</a>  <a href="com.marcuscom.MISAL.MISALCiscoIOS.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
</body>
</html>
@


1.7
log
@This is the latest round of javadocs.
@
text
@d36 1
a36 1
  <dd> 1.0, $Id: MISAL.java,v 1.12 2001/06/17 07:17:30 jmarcus Exp $
@


1.6
log
@More javadoc updates.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Fri Jun 15 13:54:50 EDT 2001 -->
d36 1
a36 1
  <dd> 1.0, $Id: MISAL.java,v 1.11 2001/06/15 17:06:28 jmarcus Exp $
d93 1
a93 1
  <dd> 
d96 1
a96 1
  <dd> 
d111 1
a111 1
  <dd> 
d117 1
a117 1
  <dd> 
d124 1
a124 1
  <dd> 
d180 1
a180 1
  <dd> 
d488 1
a488 1
    <dd> <a href="#getBufferSize">getBufferSize</a>, <a href="#setBufferSize">setBufferSize</a>, <a href="#getBuffer">getBuffer</a>
d496 10
d511 11
d525 1
a525 1
 public synchronized boolean getDebug()
d527 8
d538 1
a538 1
 public synchronized boolean toggleDebug()
d540 10
d628 11
d644 5
@


1.5
log
@Fix and add more documentation.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Fri Jun 15 13:00:23 EDT 2001 -->
d36 1
a36 1
  <dd> 1.0, $Id$
@


1.4
log
@Massive documentation updates.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Fri Jun 15 01:16:24 EDT 2001 -->
d29 1
a29 29
Copyright &copy; 2001 Joe Clarke &lt;marcus@@marcuscom.com&gt;<br>
 All rights reserved.<br>
 <p>
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 <ol>
 <li>Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.</li>
 <li>Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.</li>
 </ul>
 <p>
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.
 </p>
 $Id: MISAL.java,v 1.8 2001/06/14 20:43:12 jmarcus Exp $
 <p>
 MISAL is the MarcusCom Intelligent Socket Abstraction Library.<br>
d31 2
a32 1
 much easier.</p>
d34 6
d158 6
d305 1
a305 1
                                   String prompt) throws MalformedPatternException
d324 1
a324 1
    <dt> <b>Throws:</b> MalformedPatternException
d510 12
@


1.3
log
@Updated the javadocs.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Thu Jun 14 14:29:15 EDT 2001 -->
d13 1
a13 1
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-com.marcuscom.MISAL.html">This Package</a>  <a href="com.marcuscom.MISAL.InsufficientCredentialsException.html#_top_">Previous</a>  <a href="com.marcuscom.MISAL.MISALCiscoIOS.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
d29 3
a31 3
-
 Copyright &copy; 2001 Joe Clarke &lt;marcus@@marcuscom.com&gt;
 All rights reserved.
d41 1
d55 1
a55 1
 $Id: MISAL.java,v 1.4 2001/06/14 16:34:34 jmarcus Exp $
d69 2
a70 1
  <dd> 
d73 2
a74 1
  <dd> 
d77 2
a78 1
  <dd> 
d81 2
a82 1
  <dd> 
d85 1
a85 1
  <dd> 
d88 1
a88 1
  <dd> 
d91 2
a92 1
  <dd> 
d100 1
a100 1
  <dd>  Create a new MISAL socket.
d108 1
a108 1
  <dd>  Add a new MISAL state to the state table.
d111 1
a111 1
  <dd> 
d135 1
a135 1
  <dd> 
d141 1
a141 1
  <dd>  Get the MISAL socket's output stream as a
d144 3
d148 1
a148 1
  <dd>  Get the MISAL socket's input stream as a
d152 1
a152 1
  <dd> 
d155 1
a155 1
  <dd> 
d159 1
a159 1
 Remove a MISAL state from the state machine.
d162 1
a162 1
  <dd> 
d180 1
a180 1
  <dd> 
d183 4
a186 1
  <dd> 
d189 1
a189 1
  <dd>  Start the state checking thread.
d192 1
a192 1
  <dd> 
d206 3
d214 3
d222 4
d231 4
d240 4
d249 5
d259 4
d274 1
a274 1
  <dd> Create a new MISAL socket.
d294 1
a294 1
  <dd> Get the MISAL socket's output stream as a
a297 2
    <dt> <b>Returns:</b>
    <dd> java.io.BufferedOutputStream
d308 1
a308 1
  <dd> Get the MISAL socket's input stream as a
a311 2
    <dt> <b>Returns:</b>
    <dd> java.io.BufferedInputStream
d323 1
a323 1
  <dd> Add a new MISAL state to the state table.  MISAL states are used
d351 1
a351 1
  <dd> Remove a MISAL state from the state machine.
d366 1
a366 1
  <dd> Start the state checking thread.
d378 8
d391 11
d407 12
d424 27
d456 8
d469 8
d482 10
d497 14
d599 1
a599 1
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-com.marcuscom.MISAL.html">This Package</a>  <a href="com.marcuscom.MISAL.InsufficientCredentialsException.html#_top_">Previous</a>  <a href="com.marcuscom.MISAL.MISALCiscoIOS.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
@


1.2
log
@Updated javadocs to match the updated API.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Thu Jun 14 12:35:16 EDT 2001 -->
d148 1
a148 1
	<a href="#removeState(java.lang.String)"><b>removeState</b></a>(String)
d150 1
d177 1
a177 1
  <dd> 
d284 1
a284 1
 public synchronized void addState(int stateId,
d310 1
a310 1
<a name="removeState(java.lang.String)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
d313 1
a313 1
 public synchronized void removeState(String prompt)
d315 10
d330 8
@


1.1
log
@This is the correct documentation for MISAL.
@
text
@d5 1
a5 1
<!-- Generated by javadoc on Thu Jun 14 11:41:32 EDT 2001 -->
d54 1
a54 1
 $Id: MISAL.java,v 1.3 2001/06/14 15:28:24 jmarcus Exp $
@

