#!/usr/local/bin/perl5.00502 -w

# $Id$

# manipulate Cisco access lists over an existing tty
# meant to be run as a subshell under telnet/kermit or
# any other connectivity program that leaves /dev/fd3 open
# to the session.

use strict;
use Expect;
use IO::File;
use Getopt::Std 'getopts';
use vars qw($opt_V $opt_D $opt_F $opt_E $opt_v $opt_q $opt_f $opt_d $opt_b);


my $options = "b:d:f:qv" . "DE:F:V:";
my $usage=
"Usage: aclmaker [-v] [-d dir] [-f file] {command} access-list-name

Manipulate Cisco access control lists on a session previously opened
on file descriptor 3.  Invoke via subshell from \"telnet\", \"kermit\" or other
Telnet client that allows subshell to inherit telnet session on fd3.

Options:
   -f file       # use \"file\" instead of same name as ACL
   -d dir        # use \"dir\" to store local copy instead of current dir
   -v            # verbose mode - show progress of all router operations

Advanced options:
    -b len      # change maximum buffer length [256k]
    -q          # quiet mode, only show errors
    -D          # turn on script debugging
    -E timeout  # set Expect timeout [10]
    -F fdnum    # use a different file descriptor (or device path)
    -V {1|2|3}  # turn on verbose Expect debugging

Commands:
    list [aclname]  # list out acl, or list names of all acls on router
    get   aclname   # copy acl from router to local file
    test  aclname   # send acl to router (with dummy name) and check for errors
    put   aclname   # tests acl, saves it to router if it has no errors
    del   aclname   # deletes acl from router
    list config     # print out router's running configuration
    get  config     # copy router's running configuration to local file
    cmd  IOS-CMD    # send arbitrary command to router and display results
";
    
   
getopts( $options );

# arguments
my $debug= $opt_D || 0;
my $expectdebug= $opt_V || 0;
my $ExpectTimeout= $opt_E || 10;
my $maxbuf= $opt_b || (1024 * 256);
my $verbose= $opt_v || 0;
my $quiet= $opt_q || 0;
my $fdnum=  $opt_F || "3";

my $acldir= $opt_d || ".";

my ($myname)= ($0 =~ m!([^/]+)$! );
die "$myname: missing command\n" . $usage unless defined($ARGV[0]);
my $command= $ARGV[0];

die "$myname: missing aclname\n" . $usage unless defined($ARGV[1]) or $command eq "list";
my $aclname= $ARGV[1] || "";
my $aclpath= $acldir . "/" . ($opt_f || $aclname);

# globals for various parameters discovered from the router
my ($routername, $running_config);
my $term_lines= 0;
my @config; # array version of $running_config

# router-specific stuff - this might change with different IOS versions
my $router_interface_prompt_str= '\(config-[a-z()]*if\)#';
my $router_config_prompt_str= '\(co(nfig)?\)#';
my $router_acl_prompt_str= '\(config-(ext|std)-nacl\)#';
my $router_length_match= '^Length: (\d+) lines,';

my ($router_prompt, $router_interface_prompt,
    $router_config_prompt, $router_acl_prompt);

my $session;
my $fd3;

sub close_router #
# don't use docommand here to avoid recursive errors
{
	print $session chr(26); # just in case, leave config mode
	print $session "terminal length $term_lines ! restore old setting\r";
	warn "$myname: sent closing commands { ^Z / terminal length $term_lines }\n"
			if $debug;
	$session->clear_accum();
	$session->close;
	exit;
}

sub fatal
{
	warn "$myname: $_[0]\n";
	close_router();
	exit 23;
}

sub docommand # send-str, expect-str or expect-str array
              # if no expect-strs supplied, default to router prompt
              # all expect-strs are forced to be regular expressions
{
	my $sendme= $_[0];
	my @expectme= @_;
	shift @expectme;

	$expectme[0]= $router_prompt if @expectme == 0;
	my @expectargs= @expectme;

	if (length($sendme))
	{
		warn "$myname: sending { $sendme } to router...\n" if $debug;
		$session->clear_accum();
		print $session "$sendme\r";
# echo checking - might be a good idea to stay in sync with the session
# but doesn't seem necessary.
		$session->expect($ExpectTimeout, $sendme) ||
			fatal("failed to match echo of command: $sendme");
	} else
	{ warn "$myname: null send string, skipping send...\n" if $debug;}
	map {$_= ['-re', $_] } @expectargs;
	
	my ($matchindex, $error, $successmatch, $beforematch, $aftermatch)=
		$session->expect($ExpectTimeout, @expectargs);

	fatal("failed to get match { " . join(" | ", @expectme) .
		" } on command:\n\t$sendme")
			if ! defined($matchindex);

	warn "$myname: matched pattern#$matchindex: $expectme[$matchindex - 1]\n"
		if $debug;

	return $matchindex;
}

sub get_prompt # figure out what router prompt is
{
	$session->clear_accum();
	print $session "\r";
	$session->expect($ExpectTimeout, ['-re', '^\S+#']) ||
		warn "$myname: error synchronizing with router prompt\n";
	warn "$myname: sent CR, received { " .
		$session->exp_before . $session->exp_match . " }\n"
			if $debug;
	$session->clear_accum();
	print $session "\r";
	$session->expect($ExpectTimeout, ['-re', '^\S+#']) ||
		fatal("cannot find enabled router prompt: got:\n\t" .
			$session->exp_before() . "\n");
	warn "$myname: sent CR, received { " .
		$session->exp_before . $session->exp_match . " }\n"
			if $debug;
	return $session->exp_match();
}

sub open_router  ### set up the Expect stuff and initialize the router
{
	if ($expectdebug) {
		$Expect::Debug= $expectdebug;
		$Expect::Exp_Internal=1;
	}

	$fd3 = new IO::File;
	# open fd3 by default ($fdnum=="3"), or use whatever user supplies
	my $fdpath= "+<" . $fdnum;;
	$fdpath= "+<&=$fdnum" if ($fdnum =~ /^[0-9]+$/);
	if (! $fd3->open($fdpath)) {
		die("$myname: must be run from telnet subshell: cannot open file $fdnum: $!\n");
	}

	$session= Expect->exp_init($fd3);

	# mentioned in the man pages but didn't work for me
	# $session->expect_stty('raw -echo');

	# discover the router prompt
	my $currentprompt= get_prompt();
	print "$myname: found Cisco prompt: $currentprompt\n" if $debug;
	($routername)= $currentprompt =~ /^([^(#]+)/;
	$router_prompt= '^' . $routername . '(\(\S+\))?#';
	$router_interface_prompt= "^" . $routername . $router_interface_prompt_str;
	$router_config_prompt= "^" . $routername . $router_config_prompt_str;
	$router_acl_prompt=    "^" . $routername . $router_acl_prompt_str;

	if ($currentprompt =~ /[()]/)
	{
		warn "$myname: router '$routername' seems to be in config mode, will fix...\n";
		docommand("end");
	}

	# get the old terminal length setting
	if ($term_lines == 0)
	{
		my $rc= docommand("show term | inc Len", $router_length_match, "^% ");
		if ($rc == 1) {
			($term_lines)= $session->exp_match() =~ /$router_length_match/o;
		} else {
			$term_lines= 24; # old IOS w/o 'inc', just assume 24
		}
		docommand(""); # resynch with prompt
	}
	docommand("terminal length 0");

	# router configs can be big, up the maximum buffer size:
	$session->match_max($maxbuf);
}

sub load_config # fetches current config
{
	docommand("show running-config ! downloading...");
	$running_config= $session->exp_before();
	@config= split('\r\n', $running_config);
	# trim junk in top of buffer
	while (@config and ($config[0] !~ /^!$/)) { shift @config; }
}

sub get_acl # acl-name   ### returns full acl out of $running_config
{
	my ($acl)= @_;
	my ($stuff, $match, @results);
	
	if ($acl =~ /^\d+$/)  # support numbered lists too!
	{
		$match= '\r\n((access-list ' . $acl . '\s+[^\r\n]+\r\n)+)';
	} else {
		$match= '\r\n(ip access-list (extended|standard) '
			. $acl . '(\r\n\s[^\r\n]*)+\r\n)';
	}

	@results= ($running_config =~ /$match/s); # treat as single string
	if (@results)
	{ $stuff= $results[0]; $stuff=~ s/\r//g; return $stuff;}
	else
	{ return ""; } # no match
}

sub abort_acl # name, offending-line
{
	my ($name, $line)= @_;
	if ($name =~ /^\d+$/)
	{
		docommand("no access-list $name");
	}
	else
	{
		docommand("no ip access-list extended $name");
		docommand("no ip access-list standard $name");
	}
	fatal("invalid input detected.  Offending line was:\n\t$line");
}

sub delete_acl # aclname, [acltype]
{
	my $name= $_[0];
	my $acltype= $_[1] || "";
	my $acl= get_acl($name);
	my @aclines= split('\n', $acl);  # get_acl already trimmed CRs

	if ( $acltype eq "" and length($acl) == 0)
	{
		warn("$myname: $routername: no ACL named '$name' found to delete\n")
			if $verbose;
		return 0;
	}
	# determine ACL type
	elsif ( $acltype eq "numbered"  or $name =~ /^\d+/ )
	{
		docommand("no access-list $name");
		warn "$myname: $routername: numbered ACL '$name' deleted\n"
			if $verbose;
		return 1;
	}
	elsif ( ( $acltype =~ /^(extended|standard)$/ )or
		$aclines[0] =~ /^ip access-list (extended|standard) $name\s*$/)
	{
		docommand("no ip access-list $1 $name");
		warn "$myname: $routername: $1 ACL '$name' deleted\n"
			if $verbose;
		return 1;
	}
	else
	{
		fatal("unparsable access list found: $acl($acltype)");
	}
}

sub disable_interface_acls # array of [interface, access-group line]
{
	my (@interfaces) = @_;

	foreach my $item (@interfaces)
	{
		docommand("interface $$item[0]", $router_interface_prompt);
		docommand("no $$item[1]", $router_interface_prompt);
		warn "$myname: $routername: $$item[0]: NO $$item[1]\n" if $verbose;
	}
}

sub enable_interface_acls # array of [interface, access-group line]
{
	my (@interfaces) = @_;

	foreach my $item (@interfaces)
	{
		docommand("interface $$item[0]", $router_interface_prompt);
		docommand("$$item[1]", $router_interface_prompt);
		warn "$myname: $routername: $$item[0]: $$item[1]\n" if $verbose;
	}
}

sub put_acl  # delete the named ACL and install a new one
{
	my ($name, @aclines)= @_;

	my @interfaces;
	my ($match, $rc, $accessgroup, $interface);

	$match= '\r\ninterface\s([^\r\n]+)(\r\n\s[^\r\n]*)+\r\n ip access-group\s+'
		. $name . '\s+(\S+)\r\n';

	while ($rc= $running_config =~ /$match/gs) # treat as single string
	{
		my $thing= $&;
		$interface=   $1;
		($accessgroup)= $thing =~ /\s([^\r\n]+)\r\n$/s;
		chomp $accessgroup;
		push @interfaces, [$interface, $accessgroup];
		warn "$myname: $name: Interface $interface / $accessgroup / $thing\n"
			if $debug;
	}

	disable_interface_acls(@interfaces);

	delete_acl($name);

	foreach my $line (@aclines)
	{
		my $rc;
		chomp $line;
		next unless $line =~ /\S/;  # skip any blank lines
		$rc= docommand($line, '\r\n% Invalid ', '\r\n% ', $router_acl_prompt);
		if ($rc < 3) # matched error message[s]?
		{
			abort_acl($name, $line);
			return 0;
		}
	}
	warn "$myname: $routername: installed new ACL '$name'\n" if $verbose;

	enable_interface_acls(@interfaces);
}

sub test_acl # aclname, acl-array ### see if acl syntax is OK
{
	my ($name, @aclines)= @_;

	fatal("sorry, numbered ACLs not supported for test or put")
		if $name =~ /^\d+/;

	fatal("ACL definition line in file $aclpath does not match '$name'\n")
		unless $aclines[0] =~ /^ip access-list (extended|standard) $name$/;
	my $listtype= $1;

	shift @aclines; # first line is OK, dump it and replace with testname
	unshift @aclines, ("ip access-list $listtype test-$name");

	put_acl("test-$name", @aclines);
	warn "$myname: $routername: Test of ACL 'test-$name' passes\n" if $verbose;

	delete_acl("test-$name", $listtype);

	return 1;
}

sub save_config_to_file # filename
{
	my $configfile;
	if (defined $_[0]) {
		my $configfile= $_[0];
		$configfile =~ s/[+&<>|]//g;
		open CONFIG, ">$configfile" or
			fatal("Cannot write to $configfile: $!");
	}
	else {
		$configfile= "STDOUT";
		open CONFIG, ">&=1"; # use stdout
	}
	print CONFIG join("\n", @config) . "\n";
	close CONFIG;
	warn "$myname: $routername: wrote running config to $configfile\n"
		unless $quiet;
}

#################### MAIN main MAIN main ##################

open_router();
load_config();

if ($command eq "get")
{
	if ($aclname eq "config")
	{
		save_config_to_file("$acldir/$routername.config");
		close_router;
	}
	my $acl=  get_acl($aclname);
	fatal("ACL $aclname does not exist on $routername")
		unless length($acl) > 0;
	open ACL, ">$aclpath" or fatal("Cannot open output file $aclpath: $!");
	print ACL $acl;
	warn "$myname: $routername: Retrieved ACL '$aclname' and saved in $aclpath\n" unless $quiet;
}
elsif ($command eq "put" or $command eq "test")
{
	open ACL, "<$aclpath" or fatal("Cannot open input file $aclpath: $!");
	my @acl= <ACL>;
	docommand("configure terminal", $router_config_prompt);
	test_acl($aclname, @acl);
	put_acl($aclname, @acl) if $command eq "put";
	warn "$myname: $routername: Updated ACL '$aclname' with contents of $aclpath\n" unless $quiet;
}
elsif ($command eq "del")
{
	docommand("configure terminal", $router_config_prompt);
	delete_acl($aclname);
}
elsif ($command eq "list")
{
	if ($aclname eq "config") {
		save_config_to_file();  # actually stdout
		close_router;
	}

	if (length($aclname) == 0) # list all
	{
		map {print $2, "\n" if /^ip access-list (extended|standard) (\S+)/; } @config;

		my @nums= map { $1 if (/^access-list (\d+)\s/);} @config;
		my %nums;
		map { $nums{$_}= $_; } @nums;
		print join("\n", grep /./, sort keys %nums), "\n";

		warn "$myname: $routername: Listing of all ACLs complete\n" unless $quiet;
	}
	else
	{
		print get_acl($aclname);
		warn "$myname: $routername: Listing of ACL '$aclname' complete\n" unless $quiet;
	}
}
elsif ($command eq "cmd")
{
	while ( shift @ARGV ne "cmd") {};
	my $command= join(' ', @ARGV);
	docommand("$command");
	my $results= $session->exp_before();
	$results=~ s/\r//g;
	print $results, "\n";
	warn "$myname: $routername: execution of command '$command' complete.\n"
		unless $quiet;
}
else
{
	fatal("unknown command: $command");
}

close_router();

__END__

=head1 NAME

aclmaker - manipulate Cisco IOS extended named access control lists (ACLs)

=head1 SYNOPSIS

B<aclmaker>  [I<-v>] [I<-d dir>] [I<-f file>]  {I<command>} I<ACL-name>

=head1 DESCRIPTION

B<aclmaker> is a tool to retrieve, save, list, or delete access
control lists on a Cisco IOS router.  You must first use I<telnet>,
I<C-kermit>, or other appropriate terminal emulator program to connect
to the Cisco router and log in as the enabled user.  You may then
spawn a subshell and invoke B<aclmaker>.

B<aclmaker> works by using file descriptor 3, which is left open by the
parent terminal emulator program and allowed to be inherited by subprocesses,
no doubt for this very purpose.

To prevent common mistakes, B<aclmaker> will first test the ACL to
make sure it does not cause a syntax error when loaded on the
router. If an ACL is being changed, B<aclmaker> will first check
to see if the ACL is used as an input or output filter on any
interfaces.  If it is, then B<aclmaker> will issue the appropriate
commands to disable the access list on those interfaces before
changing the list, and re-enable the access list on those interfaces
afterwards.  This prevents communications from being interrupted by a
partially loaded access list.

B<aclmaker> lets you copy an ACL from the router and save it on
your local filesystem, or send a file from your local filesystem
to the router to be saved as an ACL.  It also lets you list out
a directory of ACLs on the router and delete an ACL from the router.

Normally, all operations that require a local file assume that
the file is in the current directory, using the same name as
the access list supplied on the command line to B<aclmaker>.
This can be overridden with the I<-d> and I<-f> options (see below).

=head1 OPTIONS

=item B<-b> I<len>  change the maximum buffer length [256k by default].  Since
B<aclmaker> reads in the router's entire configuration, you would need to 
increase this parameter if the router's configuration exceeds the default
size.

=item B<-d> I<dir>  use I<dir> as the directory for the local file instead
of the current working directory.

=item B<-f> I<file>  use I<file> as the name of the local file instead of
the I<access-list-name> specified on the command line.

=item B<-q>  quiet mode - suppress all status messages except for errors

=item B<-v>  verbose mode - show status of each router operation.

=head2 Advanced Options

=item B<-D>  turn on script debugging [off by default].  Commands
sent to the router, and the matching responses, will be shown on stderr.

=item B<-E> I<timeout>  set Expect timeout in seconds [10 by default].

=item B<-F> I<filearg>  specify the file to use to reach the router's
session [file descriptor 3 by default].  If I<filearg> is not a
decimal integer, it will be interpreted as a file path.

=item B<-V> I<n>  set Expect debugging to I<n>.  Zero (the default) disables
debugging, values from 1 to 3 show increasing levels of debugging.  Setting
this value to 3 will show the entire Expect buffer, which will create very
large debug output.

=head1 COMMANDS

=item B<list> [I<aclname>]   list the contents of I<aclname> on standard
output, or, if no I<aclname> is supplied, list out all named ACLS
on the router.

=item B<list> 'config'   list out the router's running configuration

=item B<get> I<aclname>   copy ACL from router to a local file.

=item B<get> 'config'   copy router's running config to a local file
(named "I<routername>.config").

=item B<test> I<aclname>   send ACL to the router with the name
'test-I<aclname>' and see if it causes a syntax error.  The dummy ACL
is then deleted.

=item B<put> I<aclname>  tests the ACL as described in the B<test> command
above, then saves the ACL to the router as I<aclname> if the ACL did not
cause any syntax errors.

=item B<del> I<aclname>  delete the ACL I<aclname> from the router.

=item B<cmd> I<command text>  send arbitrary command to router and display
the results on standard output.

=head1 EXAMPLES

 Router# ^]
 telnet> !
 $ aclmaker list

>From the telnet session to the router, use the telnet escape
character and then invoke a subshell with the "!" command.
You are now ready to use B<aclmaker>.

=item B<aclmaker get wan-in>

Retrieves the ACL 'wan-in' and saves it
as the file 'wan-in' in the current directory.

=item B<aclmaker -d /conf/routers/sanjose put wan-out>
Takes the file /conf/routers/sanjose/wan-out and saves
it as an ACL named 'wan-out' on the router.

=head1 NOTES

For numbered ACLs, B<aclmaker> only knows how to list, get, or delete.
Test and put of numbered ACLs are not supported yet.

B<aclmaker> manipulates the "terminal length" of the router to
prevent the router from pausing during output displays.  If B<aclmaker>
is aborted during its run, it may leave the router in a state where
output pausing is disabled.

When you return to your router session (by exiting the subshell)
after running B<aclmaker>, you may see the output of B<aclmaker>'s
attempts to restore the router environment (such as a "terminal length"
command).  This is normal.

=head1 AUTHOR

Ed Ravin <eravin@panix.com>.  This script is licensed under the GPL.
B<aclmaker> requires the Expect, IO::File, and Getopt::std Perl modules.
